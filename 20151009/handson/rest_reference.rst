reStructuredText記法
=====================


.. highlight:: none

インライン記法 (syntax)
-----------------------
文章の中にある「単語」や「フレーズ」を装飾します。

.. code-block:: rst
   :rendered-block: vertical

   単語を * で囲うと *強調* になります。

   ** は **より強い強調** に使います。

   `` （バッククオート） は ``make html`` のようにコードなどを表現します。



段落 (syntax)
-------------
空行で区切られた文章はそれぞれが段落になります。

.. code-block:: rst
   :rendered-block: horizonal

   ここは最初の段落です。
   連続した行は同じ段落になります。

   1行以上空行を入れると、次の段落になります。
   同じ段落では改行は無視されます。


引用 (syntax)
-------------
前の段落より一段インデントが深い段落は引用になります。

.. code-block:: rst
   :rendered-block: horizonal

   物語は次の一行からはじまります。

     トンネルを抜けるとそこは雪国であった。

   引用の内部は段落として解釈されます。

     段落として解釈されるので
     改行は無視されます。
     reSTのマークアップも **使うことが** *できます* 。

.. _section-marks:

セクション名 (syntax)
-----------------------
セクション名と、それに続く文章の組をセクションと呼びます。
セクション名は ``=`` や ``-`` 、 ``^`` などの記号で文字列に下線を引いて記述します。

セクション名の装飾には数多くの記号を使えますが、どの記号がどのレベルになるというルールは存在せず、
文書内で登場した順にレベルが下がっていくというルールになっています。


.. code-block:: rst
   :rendered-block: horizonal

   =====================
   セクション（レベル1）
   =====================

   セクション（レベル1）の本文

   セクション（レベル2）A
   ======================

   セクション（レベル2）の本文

   セクション（レベル3）AA
   -----------------------

   セクション（レベル3）の本文

   セクション（レベル2）B
   ======================

   セクション（レベル2）の本文


このように文章を書いた場合、以下の階層構造を表します。

.. code-block:: text

   セクション（レベル1）
     +-- セクション（レベル2）A
     |     +-- セクション（レベル3）AA
     +-- セクション（レベル2）B

セクション名の装飾には以下の記号が使用できます::

   ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~

ただし、見やすさの観点から、以下の記号が推奨されています::

   = - ` : . ' " ~ ^ _ * + #

.. セクション: セクション名と本文を持つかたまり。サブセクションを持つ場合もある。
.. セクション名: セクションのタイトル
.. サブセクション: セクション内にある、異なるレベルのセクション
.. セクションレベル: ファイル内で登場順にレベル1から6まで階層づけられる
.. 見出し: セクション名
.. セクション記法: セクション名の装飾方法
.. タイトル: セクション名を指す場合と、ファイル内の最初のセクション名を指す場合がある

.. _bullet-list:

番号なしリスト (syntax)
------------------------
``*`` などの記号を使って項目を並べて、番号なしリスト（箇条書き）を作ります。

.. code-block:: rst
   :rendered-block: horizonal

   * 箇条書きです
   * 先頭に * や - などの記号を付けて
   * 項目を並べます

     * 子リストを作るときは
     * 一行空けて、一段インデントを深くします

番号なしリストの装飾には以下の記号が使用できます::

   * + -


.. リスト: 箇条書き、番号付き箇条書きのこと。
.. 親リスト: レベル1のリスト
.. サブリスト: レベル2以上の入れ子のリスト
.. 箇条書き: bullet list. 番号なしリスト
.. 番号付き箇条書き: enumerated list. 番号付きリスト


.. _enumerated-list:

番号付きリスト (syntax)
-----------------------
番号付きリストは、 ``1.``, ``2.``, ``3.``, ... のように、先頭に数字、ドット、スペースを書いてから文章を続けて書きます。
``(1)``, ``(2)``, ``(3)`` ... や ``1)``, ``2)``, ``3)`` のような括弧付きや ``A.``, ``B.``, ``C.`` のようなアルファベットでも表現できます。

.. code-block:: rst
   :rendered-block: horizonal

   1. 箇条書きです
   2. 先頭に番号を付けて
   3. 項目を並べます

      (1) 子リストを作るときは
      (2) 一行空けて、一段インデントを深くします


また、 ``#.`` と書くことで自動採番もできます。

.. code-block:: rst

   #. 番号付きリストです
   #. 自動採番されるので並べ替えが柔軟にできます
   #. でもreSTのまま読んだら何だか分かりません



定義リスト (syntax)
-------------------
用語と説明書きを続けて書くと定義リストになります。
説明書きは用語の次の行にインデントを一段深くして書きます。

.. code-block:: rst
   :rendered-block: horizonal

   箇条書き
     先頭に * や - などの記号を付けて項目を並べます

   番号付き箇条書き
     先頭に番号を付けて項目を並べます

   定義リスト
     用語と説明書きを続けて書きます。
     説明書きは用語の次の行に書きます。
     その際、インデントを一段深くしてください。


ハイパーリンク (syntax)
------------------------
文章中のURLは自動的にハイパーリンクになります。

.. code-block:: rst
   :rendered-block: horizonal

   http://sphinx-users.jp/


ある文字列にハイパーリンクを付けたい場合は次のように記述します。

.. code-block:: rst
   :rendered-block: horizonal

   `Sphinx-users.jp <http://sphinx-users.jp/>`_ はSphinxの情報を発信しています。

   `このように書いて`_ 、以降の行でURLを設定することもできます。

   .. _このように書いて: http://sphinx-doc.org/

ハイパーリンクについては、さらにいくつかの書き方があります。

URL
   URLそのまま書きます::

      文中に http://docs.sphinx-users.jp/ のように書く。

   HTML変換例::

      文中に
      <a class="..." href="http://docs.sphinx-users.jp/">
        http://docs.sphinx-users.jp
      </a>
      のように書く。

email
   emailアドレスをそのまま書きます::

      文中に support@example.com のように書く。

   HTML変換例::

      文中に
      <a class="..." href="mailto:support%40example.com">
        support<span>@</span>example<span>.</span>com
      </a>
      のように書く。

名前付き参照ターゲット
   任意の文字列を任意のURLにリンクさせるための書式です。まず、reSTの
   `名前付き参照ターゲット` 書式で以下のように名前とURLの対を書きます::

      .. _Sphinx: http://sphinx-doc.org/
      .. _Sphinx users jp: http://sphinx-users.jp/
      .. _ユーザ会: http://sphinx-users.jp/

   これで、3つの参照ターゲットの名前 ``Sphinx`` 、 ``Sphinx users jp`` 、
   ``ユーザ会`` を定義できました。これは定義だけなので、このままビルドしても
   変換したHTMLには何も表示されません。これらのリンクを文中に埋め込むには、
   以下のように `参照` という書式で書きます::

      文中に Sphinx_ のように書く。
      あるいはスペースを含む場合 `Sphinx users jp`_ のように書く。
      日本語の場合も同様に `ユーザ会`_ のように書く。
      参照は Sphinx_ のように複数書ける。

   このように、参照にはいくつかの書き方があります。
   連続した英数字の末尾に ``_`` （アンダースコア）を付けるか、
   対象文字列が空白や日本語を含む場合 ````` （バッククォート）で囲み、
   末尾に ``_`` を付けます。前後に半角スペースを忘れないようにしましょう。

   HTML変換例::

      文中に
      <a class="..." href="http://sphinx-doc.org/">Sphinx</a>
      のように書く。あるいはスペースを含む場合
      <a class="..." href="http://sphinx-users.jp/">Sphinx users jp</a>
      のように書く。
      日本語の場合も同様に
      <a class="..." href="http://sphinx-users.jp/">ユーザ会</a>
      のように書く。参照は
      <a class="..." href="http://sphinx-doc.org/">Sphinx</a>
      のように複数書ける。

   この書き方の特徴は、文章と同じ段落内にはURLを書かないことです。
   これによって、読みやすさが向上します。ただしそのためには、参照名の
   文字列を読んで分かる内容にしておくべきでしょう。
   たとえば、「 ``詳しくは `ここ`_ を参照`` 」のように「ここ」という名前から
   リンク先を推測できないような文字列を使うと、ぱっと見てどこにリンク
   しているか分からなくなるため、
   「 ``詳しくは `Sphinxユーザ会`_ を参照`` 」 のように、適切な参照名を
   付けた方がよいでしょう。


名前付き参照ターゲット（埋め込み版）
   URLと文字列を近くに書けないと書きづらい、という場合は、参照ターゲット
   の定義と利用を同時に行う書き方があります::

      文中に `Sphinx <http://sphinx-doc.org/>`_ のように書く。
      あるいはスペースを含む場合
      `Sphinx users jp <http://sphinx-users.jp/>`_ のように書く。
      日本語の場合も同様に `ユーザ会 <http://sphinx-users.jp/>`_
      のように書く。

   これで1つ前の例と同じ結果を得られますが、reSTのまま読むのは難しく
   なってしまいました。また、このような書き方をした場合は、2重定義にならない
   ように気をつけてください。以下の書き方はエラーになります::

      ドキュメントが
      `ここ <http://sphinx-doc.org/>`_ と
      `ここ <http://sphinx-users.jp/>`_ にあります。

   これをURLを埋め込まない書き方に置き換えると、以下のようになります::

      ドキュメントが `ここ`_  と `ここ`_ にあります。

      .. _ここ: http://sphinx-doc.org/
      .. _ここ: http://sphinx-users.jp/

   このように「ここ」という参照ターゲット名を2回定義しているため、ビルド時に
   ``index.rst:2: WARNING: Duplicate explicit target name: "ここ".``
   という警告が発生してしまいます。

   reSTの読みやすさを損なってしまう上に、うっかり名前を2重定義してしまう
   可能性があるため、利用には注意が必要です。
   ワークアラウンドとしては、次に紹介する、名前なし参照ターゲットを使う
   方法があります。

名前なし参照ターゲット
   名前なし参照ターゲットは、名前を付けずにURLを定義します::

      .. __: http://sphinx-doc.org/
      .. __: http://sphinx-users.jp/

      文中に Sphinx__ や `Sphinx users jp`__ のように書く。

   このように、リンクしたい文字列に ``__`` （アンダースコアを2つ）付けます。

   このように書いた場合、定義した順番と使われる順番に依存してURLが割り当て
   られます。分かりにくくなるため、定義する行と参照する行はあまり離さない
   ほうが良いでしょう。

   HTML変換例::

      文中に
      <a class="..." href="http://sphinx-doc.org/">Sphinx</a>
      や
      <a class="..." href="http://sphinx-doc.org/">Sphinx users jp</a>
      のように書く。

   なお、名前なし参照ターゲットをURL埋め込みで書くこともできます。この場合、
   名前定義の重複エラーは発生しません。::

      ドキュメントが
      `ここ <http://sphinx-doc.org/>`__ と
      `ここ <http://sphinx-users.jp/>`__ にあります。



ラベル(syntax)、クロスリファレンス(role)
----------------------------------------
文書の任意の箇所にラベルを付けられます。
クロスリファレンスは文書内のラベルにリンクを張ります。

.. code-block:: rst
   :rendered-block: vertical

   .. _my-reference-label:

   クロスリファレンスの使い方
   ==========================

   refを使って文章中のラベルに対してリンクを貼れます。(:ref:`my-reference-label`)
   複数のファイルをまたがることもできます。


別reSTファイルへのリンク (role)
-------------------------------
あるreSTファイルにリンクできます。

.. code-block:: rst
   :rendered-block: vertical

   index.rstへのリンクを張りたい場合は :doc:`index` と書きます。
   ディレクトリが異なる場合は :doc:`../index` のように相対パス指定もできます。


別ファイルへのリンク (role)
---------------------------
reST以外のファイルへのダウンロード用リンクを作成します。

.. code-block:: rst
   :rendered-block: vertical

   logo.jpgへのリンクを張りたい場合は :download:`logo.jpg` と書きます。
   ファイルへのパスは文書と同じファイルからの相対パスになるため、
   この例では文書と同じディレクトリにlogo.jpgを配置します。

   なお、:download:`/logo.jpg` と先頭に / を付けた場合は
   プロジェクトルートからの相対パスになります。


フィールドリスト (syntax)
-------------------------
見出しと内容のペアを使って簡単な表を作ります。

.. code-block:: rst
   :rendered-block: horizonal

   各種バージョン一覧

   :OS: CentOS 6.4
   :Python: 2.7.1
   :Sphinx: 1.2b1


リテラルコードブロック (syntax)
-------------------------------
ソースコードなどを文章の中に埋め込みます。

.. code-block:: rst
   :rendered-block: horizonal

   ::

     "::" の次に1行分空行を入れて、インデントを深くします。
     リテラルコードブロックの中での改行は
     維持されたまま変換されます。

   "::" 記号は文章の末尾に書くこともできます::

     空行とインデントをお忘れなく。


code-block (directive)
----------------------
ハイライトしながらソースコードなどを文章の中に埋め込みます。

.. code-block:: rst
   :rendered-block: horizonal

   .. code-block:: python

      def hello():
          print "Python 用のハイライトを適用しています"
          print "code-block ディレクティブの次の行は 1行空けてください"


literalinclude (directive)
---------------------------
外部ファイルを読み込み、内容を文章の中に埋め込みます。

::

  .. literalinclude:: hello.py

テーブル(simple table) (syntax)
--------------------------------
"=" 記号を使って表を記述します。

.. code-block:: rst
   :rendered-block: horizonal

   ============ ================ ==========
   ツールの名前 開発者           バージョン
   ============ ================ ==========
   Python       Guido van Rossum 3.3.2
   Sphinx       Georg Brandl     1.2b1
   blockdiag    Takeshi KOMIYA   1.2.4
   ============ ================ ==========


テーブル(grid table) (syntax)
------------------------------
"-"、"="、"+" などの記号を使って複雑な表を記述します。

.. code-block:: rst
   :rendered-block: horizonal

   +--------------+------------------+------------+
   | ツールの名前 | 開発者           | バージョン |
   +==============+==================+============+
   | Python       | Guido van Rossum | 3.3.2      |
   +--------------+------------------+------------+
   | Sphinx       | Georg Brandl     | 1.2b1      |
   +--------------+------------------+------------+
   | blockdiag    | Takeshi KOMIYA   | 1.2.4      |
   +--------------+------------------+------------+


csv-table (directive)
---------------------
CSV形式のデータを使って表を記述します。
ヘッダの行数を :header-rows: に指定します（無指定の場合はヘッダなし）。

.. code-block:: rst
   :rendered-block: horizonal

   .. csv-table::
      :header-rows: 1

      ツールの名前,開発者,バージョン
      Python,Guido van Rossum,3.3.2
      Sphinx,Georg Brandl,1.2b1
      blockdiag,Takeshi KOMIYA,1.2.4


csv-tableは ::

  .. csv-table::
     :file: tools.csv

と指定することで外部のCSVファイルを読み込めます。

list-table (directive)
----------------------
箇条書きのデータを使って表を記述します。
ヘッダの行数を :header-rows: に指定します（無指定の場合はヘッダなし）。

.. code-block:: rst
   :rendered-block: horizonal

   .. list-table::
      :header-rows: 1

      * - ツールの名前
        - 開発者
        - バージョン
      * - Python
        - Guido van Rossum
        - 3.3.2
      * - Sphinx
        - Georg Brandl
        - 1.2b1
      * - blockdiag
        - Takeshi KOMIYA
        - 1.2.4


コメントアウト (syntax)
-----------------------
文章内の一部の行をコメントアウトします。

.. code-block:: rst
   :rendered-block: horizonal

   .. コメントアウトされた文章です。
      続く行（同じインデント）もコメントアウトされます。

      コメントアウトされた文章は、変換の際に読み飛ばされます。

   この行はコメントではありません。


画像 (directive)
----------------
文章内に画像を埋め込みます。

.. code-block:: rst
   :rendered-block: horizonal

   .. image:: logo.jpg

   オプション（widthもしくはheight）を指定して、サイズ指定することもできます。

   .. image:: logo.jpg
      :width: 195

   キャプションを付けたい場合はfigureディレクティブを使用します。

   .. figure:: logo.jpg
      :width: 195

      Sphinxのロゴ



脚注 (syntax)
-------------
文章に関する注釈を文中に埋め込みます。

.. code-block:: rst
   :rendered-block: horizonal

   Sphinx [1]_ はPython [2]_ 製のドキュメントツールです。

   .. [1] 1番に対する脚注をここに書きます。
   .. [2] 2番に対する脚注です。リンクになります。


注釈 (directive)
----------------
文章に関する注釈を埋め込みます。
* note
* warning

.. code-block:: rst
   :rendered-block: horizonal

   .. note:: ノート（注釈）をここに書きます。
             複数行書けます。

   .. warning:: ワーニングを書けます。


TOCツリー (directive)
---------------------
文書構造を定義し、パート間の親子関係を定義します。

::

  .. toctree::

     purpose
     procedure
     verification
